## sia_apac_cirurgia_bariatrica
DO $$
DECLARE
    tbl_name TEXT; -- Nome da tabela
    col_name TEXT; -- Nome da coluna
    invalid_count INT; -- Contador de valores inválidos
BEGIN
    -- Tabelas a serem processadas
    FOR tbl_name IN
        SELECT unnest(ARRAY[
            'sia_apac_cirurgia_bariatrica'
        ])
    LOOP
        RAISE NOTICE 'Processando tabela: %', tbl_name;

        -- Colunas a serem processadas
        FOR col_name IN
            SELECT c.column_name
            FROM information_schema.columns c
            WHERE c.table_name = tbl_name
              AND c.column_name LIKE '%dt%' -- Apenas colunas que contenham "dt"
              AND c.data_type IN ('character', 'character varying', 'text') -- Apenas colunas de texto
        LOOP
            RAISE NOTICE 'Processando coluna: % na tabela: %', col_name, tbl_name;

            -- Verificar valores inválidos
            EXECUTE format(
                'SELECT COUNT(*) FROM %I WHERE %I !~ ''^\d{8}$''',
                tbl_name, col_name
            )
            INTO invalid_count;

            -- Se houver valores inválidos, criar nova coluna
            IF invalid_count > 0 THEN
                RAISE NOTICE 'Criando nova coluna new_%I para valores inválidos na tabela %', col_name, tbl_name;

                EXECUTE format(
                    'ALTER TABLE %I ADD COLUMN new_%I TEXT',
                    tbl_name, col_name
                );

                EXECUTE format(
                    'UPDATE %I SET new_%I = %I',
                    tbl_name, col_name, col_name
                );

                RAISE NOTICE 'Valores inválidos copiados para new_%I na tabela %', col_name, tbl_name;
            END IF;

            -- Alterar coluna original para DATE usando TO_DATE
            BEGIN
                EXECUTE format(
                    'ALTER TABLE %I ALTER COLUMN %I TYPE DATE USING CASE
                        WHEN %I ~ ''^\d{8}$'' THEN TO_DATE(%I, ''YYYYMMDD'')
                        ELSE NULL
                    END',
                    tbl_name, col_name, col_name, col_name
                );
                RAISE NOTICE 'Coluna % alterada para DATE na tabela %', col_name, tbl_name;
            EXCEPTION WHEN OTHERS THEN
                RAISE WARNING 'Erro ao alterar coluna % na tabela %', col_name, tbl_name;
            END;
        END LOOP;
    END LOOP;
END $$;
# resultado: tabelas convertidas

## sia_apac_confeccao_de_fistula
DO $$
DECLARE
    tbl_name TEXT; -- Nome da tabela
    col_name TEXT; -- Nome da coluna
    invalid_count INT; -- Contador de valores inválidos
BEGIN
    -- Tabelas a serem processadas
    FOR tbl_name IN
        SELECT unnest(ARRAY[
            'sia_apac_confeccao_de_fistula'
        ])
    LOOP
        RAISE NOTICE 'Processando tabela: %', tbl_name;

        -- Colunas a serem processadas
        FOR col_name IN
            SELECT c.column_name
            FROM information_schema.columns c
            WHERE c.table_name = tbl_name
              AND c.column_name LIKE '%dt%' -- Apenas colunas que contenham "dt"
              AND c.data_type IN ('character', 'character varying', 'text') -- Apenas colunas de texto
        LOOP
            RAISE NOTICE 'Processando coluna: % na tabela: %', col_name, tbl_name;

            -- Verificar valores inválidos
            EXECUTE format(
                'SELECT COUNT(*) FROM %I WHERE %I !~ ''^\d{8}$''',
                tbl_name, col_name
            )
            INTO invalid_count;

            -- Se houver valores inválidos, criar nova coluna
            IF invalid_count > 0 THEN
                RAISE NOTICE 'Criando nova coluna new_%I para valores inválidos na tabela %', col_name, tbl_name;

                EXECUTE format(
                    'ALTER TABLE %I ADD COLUMN new_%I TEXT',
                    tbl_name, col_name
                );

                EXECUTE format(
                    'UPDATE %I SET new_%I = %I',
                    tbl_name, col_name, col_name
                );

                RAISE NOTICE 'Valores inválidos copiados para new_%I na tabela %', col_name, tbl_name;
            END IF;

            -- Alterar coluna original para DATE usando TO_DATE
            BEGIN
                EXECUTE format(
                    'ALTER TABLE %I ALTER COLUMN %I TYPE DATE USING CASE
                        WHEN %I ~ ''^\d{8}$'' THEN TO_DATE(%I, ''YYYYMMDD'')
                        ELSE NULL
                    END',
                    tbl_name, col_name, col_name, col_name
                );
                RAISE NOTICE 'Coluna % alterada para DATE na tabela %', col_name, tbl_name;
            EXCEPTION WHEN OTHERS THEN
                RAISE WARNING 'Erro ao alterar coluna % na tabela %', col_name, tbl_name;
            END;
        END LOOP;
    END LOOP;
END $$;
# resultado: tabelas convertidas

## sia_apac_acompanhamento_multiprofissional
DO $$
DECLARE
    tbl_name TEXT; -- Nome da tabela
    col_name TEXT; -- Nome da coluna
    invalid_count INT; -- Contador de valores inválidos
BEGIN
    -- Tabelas a serem processadas
    FOR tbl_name IN
        SELECT unnest(ARRAY[
            'sia_apac_acompanhamento_multiprofissional'
        ])
    LOOP
        RAISE NOTICE 'Processando tabela: %', tbl_name;

        -- Colunas a serem processadas
        FOR col_name IN
            SELECT c.column_name
            FROM information_schema.columns c
            WHERE c.table_name = tbl_name
              AND c.column_name LIKE '%dt%' -- Apenas colunas que contenham "dt"
              AND c.data_type IN ('character', 'character varying', 'text') -- Apenas colunas de texto
        LOOP
            RAISE NOTICE 'Processando coluna: % na tabela: %', col_name, tbl_name;

            -- Verificar valores inválidos
            EXECUTE format(
                'SELECT COUNT(*) FROM %I WHERE %I !~ ''^\d{8}$''',
                tbl_name, col_name
            )
            INTO invalid_count;

            -- Se houver valores inválidos, criar nova coluna
            IF invalid_count > 0 THEN
                RAISE NOTICE 'Criando nova coluna new_%I para valores inválidos na tabela %', col_name, tbl_name;

                EXECUTE format(
                    'ALTER TABLE %I ADD COLUMN new_%I TEXT',
                    tbl_name, col_name
                );

                EXECUTE format(
                    'UPDATE %I SET new_%I = %I',
                    tbl_name, col_name, col_name
                );

                RAISE NOTICE 'Valores inválidos copiados para new_%I na tabela %', col_name, tbl_name;
            END IF;

            -- Alterar coluna original para DATE usando TO_DATE
            BEGIN
                EXECUTE format(
                    'ALTER TABLE %I ALTER COLUMN %I TYPE DATE USING CASE
                        WHEN %I ~ ''^\d{8}$'' THEN TO_DATE(%I, ''YYYYMMDD'')
                        ELSE NULL
                    END',
                    tbl_name, col_name, col_name, col_name
                );
                RAISE NOTICE 'Coluna % alterada para DATE na tabela %', col_name, tbl_name;
            EXCEPTION WHEN OTHERS THEN
                RAISE WARNING 'Erro ao alterar coluna % na tabela %', col_name, tbl_name;
            END;
        END LOOP;
    END LOOP;
END $$;
# resultado: novas tabelas